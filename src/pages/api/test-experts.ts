import type { NextApiRequest, NextApiResponse } from 'next';

interface ExpertMatch {
  id: string;
  name: string;
  profession: string;
  email: string;
  shortBio: string;
  profileUrl: string;
  matchScore: number;
  matchedTags: string[];
}

const AIRTABLE_API_KEY = process.env.AIRTABLE_API_KEY;
const AIRTABLE_BASE_ID = 'apptAJxE6IudBH8fW';
const AIRTABLE_TABLE_ID = 'tblgvgDuQm20rNVPV';

// –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ Airtable
async function fetchExperts(): Promise<any[]> {
  try {
    const url = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}`;
    
    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
      },
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ Airtable API: ${response.status}`);
    }

    const data = await response.json();
    return data.records || [];

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:', error);
    return [];
  }
}

// –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
function matchExpert(formData: any, experts: any[]): ExpertMatch | null {
  for (const record of experts) {
    const fields = record.fields;
    if (!fields.Name || !fields.Email) continue;

    const expertTags = fields.All_Tags || [];
    let matchScore = 0;
    const matchedTags: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    if (formData.destination) {
      const dest = formData.destination.toLowerCase();
      if (dest.includes('utah') || dest.includes('—é—Ç–∞')) {
        if (expertTags.includes('region_utah')) {
          matchScore += 30;
          matchedTags.push('Utah Expert');
        }
      }
      if (dest.includes('grand canyon') || dest.includes('–≥—Ä–∞–Ω–¥ –∫–∞–Ω—å–æ–Ω')) {
        if (expertTags.includes('dest_grand_canyon')) {
          matchScore += 40;
          matchedTags.push('Grand Canyon');
        }
      }
      if (dest.includes('europe') || dest.includes('–µ–≤—Ä–æ–ø–∞')) {
        if (expertTags.some(tag => tag.startsWith('country_'))) {
          matchScore += 25;
          matchedTags.push('Europe');
        }
      }
    }

    if (formData.activities) {
      const activities = formData.activities.toLowerCase();
      if (activities.includes('hiking') || activities.includes('–ø–æ—Ö–æ–¥')) {
        if (expertTags.includes('activity_hiking')) {
          matchScore += 25;
          matchedTags.push('Hiking');
        }
      }
      if (activities.includes('photography') || activities.includes('—Ñ–æ—Ç–æ')) {
        if (expertTags.includes('activity_photography')) {
          matchScore += 20;
          matchedTags.push('Photography');
        }
      }
    }

    if (formData.travelerType) {
      const type = formData.travelerType.toLowerCase();
      if (type.includes('solo') || type.includes('–æ–¥–∏–Ω')) {
        if (expertTags.includes('traveler_solo')) {
          matchScore += 15;
          matchedTags.push('Solo Travel');
        }
      }
      if (type.includes('family') || type.includes('—Å–µ–º—å—è')) {
        if (expertTags.includes('traveler_families')) {
          matchScore += 15;
          matchedTags.push('Family Travel');
        }
      }
    }

    if (formData.experienceLevel) {
      const level = formData.experienceLevel.toLowerCase();
      if (level.includes('extreme') || level.includes('—ç–∫—Å—Ç—Ä–∏–º')) {
        if (expertTags.includes('level_extreme')) {
          matchScore += 20;
          matchedTags.push('Extreme Level');
        }
      }
      if (level.includes('beginner') || level.includes('–Ω–∞—á–∏–Ω–∞—é—â')) {
        if (expertTags.includes('traveler_beginners')) {
          matchScore += 20;
          matchedTags.push('Beginner Friendly');
        }
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞
    if (matchScore > 20) {
      return {
        id: record.id,
        name: fields.Name,
        profession: fields.Profession || 'Travel Expert',
        email: fields.Email,
        shortBio: fields.Short_Bio || '–û–ø—ã—Ç–Ω—ã–π –≥–∏–¥ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –æ—Ç–¥—ã—Ö—É.',
        profileUrl: fields.Profile_URL || '#',
        matchScore: Math.min(matchScore, 100),
        matchedTags: matchedTags,
      };
    }
  }

  // –ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
  const firstExpert = experts.find(r => r.fields.Name && r.fields.Email);
  if (firstExpert) {
    const fields = firstExpert.fields;
    return {
      id: firstExpert.id,
      name: fields.Name,
      profession: fields.Profession || 'Travel Expert',
      email: fields.Email,
      shortBio: fields.Short_Bio || '–û–ø—ã—Ç–Ω—ã–π –≥–∏–¥ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –æ—Ç–¥—ã—Ö—É.',
      profileUrl: fields.Profile_URL || '#',
      matchScore: 60,
      matchedTags: ['General Expert'],
    };
  }

  return null;
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ success: false, error: 'Method not allowed' });
  }

  try {
    const formData = req.body;
    console.log('üîµ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', formData);

    // –ü–æ–ª—É—á–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ Airtable
    const experts = await fetchExperts();
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${experts.length} —ç–∫—Å–ø–µ—Ä—Ç–æ–≤`);

    if (experts.length === 0) {
      return res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ Airtable' 
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
    const matchedExpert = matchExpert(formData, experts);

    if (!matchedExpert) {
      return res.status(404).json({
        success: false,
        error: '–≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç: ${matchedExpert.name} (${matchedExpert.matchScore}%)`);

    return res.status(200).json({
      success: true,
      expert: matchedExpert,
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞:', error);
    return res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    });
  }
}